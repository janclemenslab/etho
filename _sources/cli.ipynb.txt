{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Command-line interface"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "usage: etho [-h] [--version] {version,init,run,gui} ...\n",
            "\n",
            "positional arguments:\n",
            "  {version,init,run,gui}\n",
            "    version             Displays system, version, and hardware info.\n",
            "    init                Initializes config files and folders.\n",
            "    run                 Starts an experiment.\n",
            "    gui                 Opens the graphical user interface.\n",
            "\n",
            "options:\n",
            "  -h, --help            show this help message and exit\n",
            "  --version             show program's version number and exit\n",
            "\u001b[0m"
          ]
        }
      ],
      "source": [
        "!etho --help"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Initialize config file and folders"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "usage: etho init [-h]\n",
            "\n",
            "Initializes config files and folders.\n",
            "\n",
            "options:\n",
            "  -h, --help  show this help message and exit\n",
            "\u001b[0m"
          ]
        }
      ],
      "source": [
        "!etho init --help"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Open the graphical user interface"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "usage: etho gui [-h] [protocol_folder] [playlist_folder]\n",
            "\n",
            "Opens the graphical user interface.\n",
            "\n",
            "positional arguments:\n",
            "  protocol_folder  Folder with protocol files.\n",
            "                   Defaults to value ['HEAD']['protocolfolder'] from \u001b[4m~/ethoconfig.yml\u001b[0m.\n",
            "  playlist_folder  Folder with playlist files.\n",
            "                   Defaults to value ['HEAD']['playlistfolder'] from \u001b[4m~/ethoconfig.yml\u001b[0m.\n",
            "\n",
            "options:\n",
            "  -h, --help       show this help message and exit\n",
            "\u001b[0m"
          ]
        }
      ],
      "source": [
        "!etho gui --help"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Start an experiment"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "usage: etho run [-h] [--save-prefix SAVE_PREFIX]\n",
            "                [--show-progress | --no-show-progress]\n",
            "                [-d | --debug | --no-debug] [-p | --preview | --no-preview]\n",
            "                protocolfile [playlistfile]\n",
            "\n",
            "Starts an experiment.\n",
            "\n",
            "positional arguments:\n",
            "  protocolfile          _description_\n",
            "  playlistfile          _description_.\n",
            "\n",
            "options:\n",
            "  -h, --help            show this help message and exit\n",
            "  --save-prefix SAVE_PREFIX\n",
            "                        Specify the stem of the filename for all saved data and logs. Will defaults to HOSTNAME-YYYYMMDD_hhmmss, where HOSTNAME is the computer name the service is run on (typically localhost).\n",
            "  --show-progress, --no-show-progress\n",
            "                        Show a progress bar. Disable if performance is criticial.\n",
            "  -d, --debug, --no-debug\n",
            "                        More verbose logs.\n",
            "  -p, --preview, --no-preview\n",
            "                        Preview the camera (will disable saving and logging and only open a window with the camera view).\n",
            "\u001b[0m"
          ]
        }
      ],
      "source": [
        "!etho run --help"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Display system, version, and hardware info"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "usage: etho version [-h] [-d | --debug | --no-debug]\n",
            "\n",
            "Displays system, version, and hardware info.\n",
            "\n",
            "options:\n",
            "  -h, --help            show this help message and exit\n",
            "  -d, --debug, --no-debug\n",
            "                        Display exception info for failed imports. Defaults to False.\n",
            "\u001b[0m"
          ]
        }
      ],
      "source": [
        "!etho version --help"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "INFO:etho.cli:macOS-14.7.1-arm64-arm-64bit\n",
            "INFO:etho.cli:etho v0.18.0\n",
            "INFO:etho.cli:\n",
            "INFO:etho.cli:  LIBRARY VERSIONS\n",
            "INFO:etho.cli:    python v3.10.16 | packaged by conda-forge | (main, Dec  5 2024, 14:20:01) [Clang 18.1.8 ]\n",
            "INFO:etho.cli:    pandas v2.2.3\n",
            "INFO:etho.cli:    numpy v2.2.1\n",
            "INFO:etho.cli:    h5py v3.12.1\n",
            "INFO:etho.cli:    scipy v1.15.1\n",
            "INFO:etho.cli:\n",
            "INFO:etho.cli:  GUI SUPPORT\n",
            "INFO:etho.cli:     GUI is available.\n",
            "INFO:etho.cli:     pyqtgraph v0.13.7\n",
            "INFO:etho.cli:     PySide6 v6.8.1\n",
            "INFO:etho.cli:     Qt v6.8.1\n",
            "INFO:etho.cli:     qtpy v2.4.2\n",
            "INFO:etho.cli:\n",
            "INFO:etho.cli:  HARDWARE SUPPORT\n",
            "WARNING:etho.cli:     Spinnaker camera SDK (PySpin) is NOT available.\n",
            "WARNING:etho.cli:     FlyCapture camera SDK (PyCapture2) is NOT available.\n",
            "WARNING:etho.cli:     Ximea camera SDK (ximea) is NOT available.\n",
            "WARNING:etho.cli:     DCAM (Hamamatsu) camera SDK (pylablib) is NOT available.\n",
            "WARNING:etho.cli:     NI daqmx (pydaqmx) is NOT available.\n",
            "WARNING:etho.cli:     Lightcrafter projector (pycrafter4500) is NOT available.\n",
            "\u001b[0m"
          ]
        }
      ],
      "source": [
        "!etho version"
      ]
    }
  ],
  "metadata": {
    "kernel_info": {
      "name": "python3"
    },
    "kernelspec": {
      "display_name": "etho",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.16"
    },
    "nteract": {
      "version": "0.15.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
